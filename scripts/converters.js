console.log('converters.js –∑–∞–≥—Ä—É–∂–µ–Ω');


// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
const conversionData = {
    currency: {
        name: '–í–∞–ª—é—Ç–∞',
        units: {
            'USD': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': 'üá™üá∫ –ï–≤—Ä–æ',
            'RUB': 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
            'GBP': 'üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤',
            'JPY': 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞',
            'CNY': 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
            'TRY': 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
            'KZT': 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ',
            'UAH': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞'
        },
        rates: null // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ API
    },
    
    length: {
        name: '–î–ª–∏–Ω–∞',
        units: {
            'm': '–ú–µ—Ç—Ä—ã',
            'km': '–ö–∏–ª–æ–º–µ—Ç—Ä—ã',
            'cm': '–°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã',
            'mm': '–ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã',
            'mi': '–ú–∏–ª–∏',
            'yd': '–Ø—Ä–¥—ã',
            'ft': '–§—É—Ç—ã',
            'in': '–î—é–π–º—ã'
        },
        baseUnit: 'm',
        conversions: {
            'm': 1,
            'km': 0.001,
            'cm': 100,
            'mm': 1000,
            'mi': 0.000621371,
            'yd': 1.09361,
            'ft': 3.28084,
            'in': 39.3701
        }
    },
    
    weight: {
        name: '–í–µ—Å',
        units: {
            'kg': '–ö–∏–ª–æ–≥—Ä–∞–º–º—ã',
            'g': '–ì—Ä–∞–º–º—ã',
            'mg': '–ú–∏–ª–ª–∏–≥—Ä–∞–º–º—ã',
            'lb': '–§—É–Ω—Ç—ã',
            'oz': '–£–Ω—Ü–∏–∏',
            't': '–¢–æ–Ω–Ω—ã'
        },
        baseUnit: 'kg',
        conversions: {
            'kg': 1,
            'g': 1000,
            'mg': 1000000,
            'lb': 2.20462,
            'oz': 35.274,
            't': 0.001
        }
    },
    
    temperature: {
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        units: {
            'C': '–¶–µ–ª—å—Å–∏–π (¬∞C)',
            'F': '–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)',
            'K': '–ö–µ–ª—å–≤–∏–Ω (K)'
        },
        convert: (value, from, to) => {
            let celsius;
            
            if (from === 'C') celsius = value;
            else if (from === 'F') celsius = (value - 32) * 5/9;
            else if (from === 'K') celsius = value - 273.15;
            
            if (to === 'C') return celsius;
            else if (to === 'F') return (celsius * 9/5) + 32;
            else if (to === 'K') return celsius + 273.15;
        }
    },
    
    volume: {
        name: '–û–±—ä—ë–º',
        units: {
            'l': '–õ–∏—Ç—Ä—ã',
            'ml': '–ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã',
            'm3': '–ö—É–±–æ–º–µ—Ç—Ä—ã',
            'gal': '–ì–∞–ª–ª–æ–Ω—ã (US)',
            'qt': '–ö–≤–∞—Ä—Ç—ã',
            'pt': '–ü–∏–Ω—Ç—ã',
            'cup': '–ß–∞—à–∫–∏',
            'fl_oz': '–ñ–∏–¥–∫–∏–µ —É–Ω—Ü–∏–∏'
        },
        baseUnit: 'l',
        conversions: {
            'l': 1,
            'ml': 1000,
            'm3': 0.001,
            'gal': 0.264172,
            'qt': 1.05669,
            'pt': 2.11338,
            'cup': 4.22675,
            'fl_oz': 33.814
        }
    },
    
    area: {
        name: '–ü–ª–æ—â–∞–¥—å',
        units: {
            'm2': '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã',
            'km2': '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã',
            'cm2': '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã',
            'ha': '–ì–µ–∫—Ç–∞—Ä—ã',
            'ac': '–ê–∫—Ä—ã',
            'ft2': '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ—É—Ç—ã',
            'mi2': '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–∏–ª–∏'
        },
        baseUnit: 'm2',
        conversions: {
            'm2': 1,
            'km2': 0.000001,
            'cm2': 10000,
            'ha': 0.0001,
            'ac': 0.000247105,
            'ft2': 10.7639,
            'mi2': 3.861e-7
        }
    },
    
    speed: {
        name: '–°–∫–æ—Ä–æ—Å—Ç—å',
        units: {
            'kmh': '–ö–∏–ª–æ–º–µ—Ç—Ä—ã/—á–∞—Å',
            'mph': '–ú–∏–ª–∏/—á–∞—Å',
            'ms': '–ú–µ—Ç—Ä—ã/—Å–µ–∫—É–Ω–¥—É',
            'kn': '–£–∑–ª—ã'
        },
        baseUnit: 'ms',
        conversions: {
            'ms': 1,
            'kmh': 3.6,
            'mph': 2.23694,
            'kn': 1.94384
        }
    },
    
    time: {
        name: '–í—Ä–µ–º—è',
        units: {
            's': '–°–µ–∫—É–Ω–¥—ã',
            'min': '–ú–∏–Ω—É—Ç—ã',
            'h': '–ß–∞—Å—ã',
            'd': '–î–Ω–∏',
            'w': '–ù–µ–¥–µ–ª–∏',
            'mon': '–ú–µ—Å—è—Ü—ã',
            'y': '–ì–æ–¥—ã'
        },
        baseUnit: 's',
        conversions: {
            's': 1,
            'min': 1/60,
            'h': 1/3600,
            'd': 1/86400,
            'w': 1/604800,
            'mon': 1/2628000,
            'y': 1/31536000
        }
    },
    
    data: {
        name: '–î–∞–Ω–Ω—ã–µ',
        units: {
            'B': '–ë–∞–π—Ç—ã',
            'KB': '–ö–∏–ª–æ–±–∞–π—Ç—ã',
            'MB': '–ú–µ–≥–∞–±–∞–π—Ç—ã',
            'GB': '–ì–∏–≥–∞–±–∞–π—Ç—ã',
            'TB': '–¢–µ—Ä–∞–±–∞–π—Ç—ã'
        },
        baseUnit: 'B',
        conversions: {
            'B': 1,
            'KB': 1/1024,
            'MB': 1/(1024*1024),
            'GB': 1/(1024*1024*1024),
            'TB': 1/(1024*1024*1024*1024)
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
function convert(value, from, to, category) {
    const data = conversionData[category];
    
    if (!data) return null;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if (category === 'temperature') {
        return data.convert(value, from, to);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∞–ª—é—Ç
    if (category === 'currency') {
        if (!data.rates) return null;
        const baseRate = data.rates[from] || 1;
        const targetRate = data.rates[to] || 1;
        return (value / baseRate) * targetRate;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É
    const baseValue = value / data.conversions[from];
    return baseValue * data.conversions[to];
}
